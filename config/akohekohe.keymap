/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/rgbled_widget.dtsi>

&sl {
    release-after-ms = <350>;
};
&sk {
    release-after-ms = <350>;
    quick-release;
};
&lt {
    tapping-term-ms = <125>;
    quick-tap-ms = <100>;
    require-prior-idle-ms = <100>;
    retro-tap;
    flavor = "balanced";
};
&caps_word {
    continue-list = <UNDER MINUS BSPC DEL>;
};

/ {
    combos {
        compatible = "zmk,combos";
        timeout-ms = <50>;

        combo_qu {
            key-positions = <10 11>;
            bindings = <&macro_qu>;
            layers = <7>;
        };

        combo_q {
            key-positions = <9 11>;
            bindings = <&kp Q>;
            layers = <7>;
        };

        combo_z {
            key-positions = <1 2>;
            bindings = <&kp Z>;
            layers = <7>;
        };

        combo_squote {
            key-positions = <14 15>;
            bindings = <&kp SQT>;
            layers = <7>;
        };

        combo_unds {
            key-positions = <5 6>;
            bindings = <&kp UNDER>;
            layers = <7>;
        };

        combo_lbspc {
            key-positions = <1 11>;
            bindings = <&kp BSPC>;
            layers = <1 6 7>;
        };

        combo_lent {
            key-positions = <9 10>;
            bindings = <&kp ENTER>;
            layers = <1 6 7>;
        };

        combo_lalt {
            key-positions = <0 9>;
            bindings = <&sk LALT>;
        };

        combo_lsft {
            key-positions = <1 10>;
            bindings = <&sk LSHFT>;
        };

        combo_lctl {
            key-positions = <2 11>;
            bindings = <&sk LCTRL>;
        };

        combo_rctl {
            key-positions = <5 14>;
            bindings = <&sk RCTRL>;
        };

        combo_rsft {
            key-positions = <6 15>;
            bindings = <&sk RSHFT>;
        };

        combo_ralt {
            key-positions = <7 16>;
            bindings = <&sk RALT>;
        };

        combo_rent {
            key-positions = <15 16>;
            bindings = <&kp ENTER>;
            layers = <1 6 7>;
        };

        combo_rbspc {
            key-positions = <14 6>;
            bindings = <&kp BSPC>;
            layers = <1 6 7>;
        };

        combo_capsword {
            key-positions = <1 10 6 15>;
            bindings = <&caps_word>;
        };

        combo_boot {
            key-positions = <0 2 5 7>;
            bindings = <&bootloader>;
        };

        combo_nav {
            key-positions = <24 25>;
            bindings = <&sl 6>;
            slow-release;
        };
    };

    macros {
        macro_qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
        };

        macro_able: able {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp L &kp E>;
        };

        macro_ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp N>;
        };

        macro_ing: ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp G>;
        };

        macro_you: you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
        };

        macro_would: would {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U &kp L &kp D>;
        };

        macro_the: _the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
        };

        macro_for: _for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R>;
        };
    };

    behaviors {
        ad_lmagic: adaptive_magic_left {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&key_repeat>;
            antecedents = <E Y I SPACE>;
            bindings = <&kp Y>, <&kp E>, <&macro_ion>, <&macro_for>;
        };

        ad_rmagic: adaptive_magic_right {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&key_repeat>;
            antecedents = <C A DOT I Y R W SPACE>;
            bindings = <&kp K>, <&macro_able>, <&kp SLASH>, <&macro_ing>, <&macro_you>, <&kp L>, <&macro_would>, <&macro_the>;
        };
        
        slt: slow_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <160>;
            quick-tap-ms = <115>;
            require-prior-idle-ms = <120>;
            retro-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
                    &kp D           &kp L           &ad_lmagic      &none   &none           &ad_rmagic      &kp O           &kp U
        &slt 1 S    &kp H           &kp R           &lt 2 T         &none   &none           &lt 3 N         &kp A           &kp I           &slt 4 E
                    &none           &none           &none                                   &none           &none           &none
                                                            &sl 7                   &kp SPACE
            >;
        };

        ext {
            bindings = <
                    &kp LC(Z)       &kp DEL         &kp ESC         &none   &none           &ind_bat        &ind_con        &bt BT_DISC
        &trans      &kp LC(C)       &kp LC(V)       &kp TAB         &none   &none           &bt BT_PRV      &bt BT_NXT      &bt BT_SEL 0    &bt BT_CLR
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        sym_ops {
            bindings = <
                    &kp PIPE        &kp AMPS        &none           &none   &none           &kp CARET       &kp ASTRK       &kp SLASH
        &kp BSLH    &kp LT          &kp GT          &trans          &none   &none           &kp EQUAL       &kp PLUS        &kp MINUS       &kp EXCL
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        sym_brc {
            bindings = <
                    &kp LBRC        &kp RBRC        &kp DQT         &none   &none           &none           &kp HASH        &kp TILDE
        &kp QMARK   &kp LPAR        &kp RPAR        &kp SEMI        &none   &none           &trans          &kp AT          &kp DLLR        &kp PRCNT
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        num {
            bindings = <
                    &kp MINUS       &kp N6          &kp N7          &none   &none           &kp N8          &kp N9          &kp PLUS
        &kp DOT     &kp N0          &kp N1          &kp N2          &none   &none           &kp N3          &kp N4          &kp N5          &trans
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        fun {
            bindings = <
                    &kp F7          &kp F8          &kp F9          &none   &none           &kp F10         &kp F11         &kp F12
        &trans      &kp F1          &kp F2          &kp F3          &none   &none           &kp F4          &kp F5          &kp F6          &trans
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        nav {
            bindings = <
                    &kp PG_DN       &kp PG_UP       &kp PSCRN       &none   &none           &none           &kp GRAVE       &none
        &kp LEFT    &kp DOWN        &kp UP          &kp RIGHT       &none   &none           &sk RCTRL       &sk RSHFT       &sk RALT        &sk RGUI
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        alpha2 {
            bindings = <
                    &kp K           &kp W           &kp G           &none   &none           &kp P           &kp X           &kp J
        &kp B       &kp F           &kp V           &kp C           &none   &none           &kp M           &kp COMMA       &kp DOT         &kp Y
                    &none           &none           &none                                   &none           &none           &none
                                                            &trans                  &trans
            >;
        };
    };
};
