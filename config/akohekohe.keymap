/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&soft_off { hold-time-ms = <5000>; };
&sl { release-after-ms = <350>; };
&sk { release-after-ms = <350>; };

/ {
    combos {
        compatible = "zmk,combos";
        timeout-ms = <50>;

        lbspc {
            key-positions = <11 20>;
            bindings = <&kp BSPC>;
        };

        lent {
            key-positions = <10 19>;
            bindings = <&kp ENTER>;
        };

        lgui {
            key-positions = <9 18>;
            bindings = <&kp LGUI>;
        };

        lalt {
            key-positions = <0 9>;
            bindings = <&sk LALT>;
        };

        lsft {
            key-positions = <1 10>;
            bindings = <&sk LSHFT>;
        };

        lctl {
            key-positions = <2 11>;
            bindings = <&sk LCTRL>;
        };

        rctl {
            key-positions = <5 14>;
            bindings = <&sk RCTRL>;
        };

        rsft {
            key-positions = <6 15>;
            bindings = <&sk RSHFT>;
        };

        ralt {
            key-positions = <7 16>;
            bindings = <&sk RALT>;
        };

        rgui {
            key-positions = <16 23>;
            bindings = <&kp RGUI>;
        };

        rent {
            key-positions = <15 22>;
            bindings = <&kp ENTER>;
        };

        rbspc {
            key-positions = <14 21>;
            bindings = <&kp BSPC>;
        };

        capsword {
            key-positions = <10 11 14 15>;
            bindings = <&caps_word>;
        };

        boot {
            key-positions = <0 2 5 7>;
            bindings = <&bootloader>;
        };

        soft_off {
            key-positions = <18 20 21 23>;
            bindings = <&soft_off>;
        };

        nav {
            key-positions = <24 25>;
            bindings = <&sl 1>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
        };

        able: able {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp L &kp E>;
        };

        ing: ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp G>;
        };

        you: you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
        };
    };

    behaviors {
        ad_lmagic: adaptive_magic_left {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&key_repeat>;
            antecedents = <A C K E D U>;
            bindings = <&able>, <&kp K>, <&kp N>, <&kp Y>, <&kp M>, <&kp Y>;
        };

        ad_rmagic: adaptive_magic_right {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&key_repeat>;
            antecedents = <DOT I Y R>;
            bindings = <&kp SLASH>, <&ing>, <&you>, <&kp L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
                    &kp P           &kp L           &kp M           &none   &none           &kp F           &kp O           &kp U
        &kp S       &kp C           &kp R           &kp T           &none   &none           &kp N           &kp A           &kp I           &kp E
                    &kp G           &ad_lmagic      &kp D                                   &kp H           &ad_rmagic      &kp Y
                                                            &sl 2                   &kp SPACE
            >;
        };

        nav {
            bindings = <
                    &kp END         &kp HOME        &none           &none   &none           &kp BSPC        &none           &kp ENTER
        &kp LEFT    &kp DOWN        &kp UP          &kp RIGHT       &none   &none           &sk RCTRL       &sk RSHFT       &sk RALT        &sk RGUI
                    &kp PG_DN       &kp PG_UP       &kp PSCRN                               &kp C_PP        &kp C_VOL_UP    &kp C_VOL_DN
                                                            &trans                  &trans
            >;
        };

        alpha2 {
            bindings = <
                    &kp J           &kp X           &kp Z           &none   &none           &kp BSPC        &kp SQT         &kp ENTER
        &sl 8       &sl 7           &sl 6           &kp W           &none   &none           &kp B           &sl 3           &sl 4           &sl 5
                    &qu             &kp Q           &kp V                                   &kp K           &kp DOT         &kp COMMA
                                                            &trans                  &trans
            >;
        };

        sym_brc {
            bindings = <
                    &kp LBRC        &kp RBRC        &kp DQT         &none   &none           &none           &none           &none
        &kp QMARK   &kp LPAR        &kp RPAR        &kp SEMI        &none   &none           &none           &trans          &none           &none
                    &kp LBKT        &kp RBKT        &kp COLON                               &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        sym_ops {
            bindings = <
                    &kp SLASH       &kp ASTRK       &kp AMPS        &none   &none           &none           &none           &none
        &kp EXCL    &kp MINUS       &kp PLUS        &kp EQUAL       &none   &none           &none           &none           &trans          &none
                    &kp LT          &kp GT          &kp PIPE                                &none           &none           &none
                                                            &trans                  &trans
            >;
        };

        sym_ext {
            bindings = <
                    &none           &kp GRAVE       &kp DQT         &none   &none           &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2
        &kp DLLR    &kp BSLH        &kp AT          &kp UNDER       &none   &none           &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &trans
                    &kp PRCNT       &kp CARET       &kp HASH                                &bt BT_CLR      &none           &none
                                                            &trans                  &trans
            >;
        };

        num {
            bindings = <
                    &none           &none           &none           &none   &none           &kp N3          &kp N5          &kp N7
        &kp DOT     &kp MINUS       &trans          &kp PLUS        &none   &none           &kp N0          &kp N1          &kp N2          &kp N9
                    &kp SLASH       &none           &kp ASTRK                               &kp N4          &kp N6          &kp N8
                                                            &trans                  &trans
            >;
        };

        fun {
            bindings = <
                    &none           &none           &none           &none   &none           &kp F7          &kp F8          &kp F9
        &none       &trans          &kp F11         &kp F12         &none   &none           &kp F4          &kp F5          &kp F6          &kp F10
                    &none           &none           &none                                   &kp F1          &kp F2          &kp F3
                                                            &trans                  &trans
            >;
        };

        ext {
            bindings = <
                    &none           &kp DEL         &kp ESC         &none   &none           &none           &none           &none
        &trans      &kp LC(C)       &kp LC(V)       &kp TAB         &none   &none           &none           &none           &none           &none
                    &kp LC(A)       &kp LC(Z)       &kp LC(Y)                               &none           &none           &none
                                                            &trans                  &trans
            >;
        };
    };
};
